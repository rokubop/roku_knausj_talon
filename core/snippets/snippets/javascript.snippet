language: html | javascript | typescript
---

name: forInLoopStatement
phrase: for in
insertionScope: statement

$1.insertionFormatter: PRIVATE_CAMEL_CASE
-
for (const $1 in $2) {
    $0
}
---

name: forOfLoopStatement
phrase: for of
insertionScope: statement

$1.insertionFormatter: PRIVATE_CAMEL_CASE
-
for (const $1 of $2) {
    $0
}
---

name: forEachStatement
phrase: for each
insertionScope: statement
-
$1.forEach(($2) => {
    $0
})
---

name: importStarStatement
phrase: import star
-
import * as $0 from "$0";
---

name: importFromStatement
phrase: import from | import
-
import $0 from "$0";
---

name: importFromStatement
phrase: import react
-
import React from "react";
---

name: namedLambdaExpression
phrase: arrow funk | con lambda | con lamb | con funk
insertionScope: statement
-
const $1 = ($2) => $0
---

name: namedLambdaExpressionExport
phrase: export arrow funk | export con lambda | export con lamb | export con funk
insertionScope: statement
-
export const $1 = ($2) => $0
---

name: reactUseState
phrase: use state
insertionScope: statement
-
const [$1, set$1] = useState($0);
---

name: reactUseEffect
phrase: use effect
insertionScope: statement
-
useEffect(() => {
    $0
}, []);
---

name: constStatement
phrase: const | con
insertionScope: statement

$1.insertionFormatter: PRIVATE_CAMEL_CASE
-
const $1 = $0
---

name: constStatementExport
phrase: export const | export con
insertionScope: statement

$1.insertionFormatter: PRIVATE_CAMEL_CASE
-
export const $1 = $0
---

name: letStatement
phrase: let
insertionScope: statement

$1.insertionFormatter: PRIVATE_CAMEL_CASE
-
let $1 = $0
---

name: stringVarStatement
phrase: string var
insertionScope: statement
-
${$0}
---

name: reduce
phrase: reduce
insertionScope: statement
-
$1.reduce((acc, value) => {
    $0
}, $2)
---

name: filter
phrase: filter
insertionScope: statement
-
$1.filter(value => $0)
---

name: map
phrase: map
insertionScope: statement
-
$1.map(value => $0)
---

name: sort
phrase: sort
insertionScope: statement
-
$1.sort((a, b) => $0)
---

name: objectEntries
phrase: object entries
insertionScope: statement
-
Object.entries($1).forEach(([key, value]) => {
    $0
})
---

name: generator
phrase: generator
insertionScope: statement
-
function* $1() {
    yield $0
}
---

name: rjsfUiOptions
phrase: UI options
insertionScope: statement
-
'ui:options': {
    $0
}
---

name: docBlock
phrase: dock
-
/** $0 */
---

name: lambdaArrow
phrase: arrow
-
$0 => $1
---

name: functionExport
phrase: export funk
-
export function $1($2) {
    $0
}
---
